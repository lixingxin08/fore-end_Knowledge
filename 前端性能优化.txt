  1：  压缩合并JS CSS精灵图  减少HTTP请求 
  2:  非核心代码异步加载-->异步加载的方式-->异步加载的区别
	 异步加载的方式：1：动态脚本加载 2：defer 3：async  区别：defer在HTML解析完才会执行，按加载顺序执行
				async是在加载后立即执行，执行顺序与加载顺序无关
  3： 利用浏览器缓存-->缓存的分类-->缓存的原理
		缓存的分类：1：强缓存Expires，Cache-Control 2：协商缓存 Last-Modified 和 If-Modified-Since， ETag 和 				If-None-Match
				列：
  4：预解析DNS 减少DNS查询  
	      列：<link rel="dns-prefetch" href="//img30.360buyimg.com" /> 
  5：使用CDN
  6 避免空SRC 和Href
  7 把CSS放在顶部  把JS放在底部
   8 避免使用CSS表达式
   10： 使用GET完成AJAX请求
   11：减少DOM元素数量
   12：不要404
   13：不要 在HTML中缩放图片
1：页面级优化
   1.减少HTTP请求数，合理设置HTTP缓存，资源合并与压缩，lazy-Load-Image,异步执行，异步请求，css放入head中，
     避免重复的资源请求
2：代码级优化
   1.减少DOM操作，减少作用域链查找

2：Vue中的性能优化
  14  Vue中路由懒加载
 15   v-once的运用  静态文件不会重新渲染
3：Webpack的前端性能优化：
   1.压缩代码 JS，CSS，
   2.利用CDN加速，将引用的静态资源改为CDN上对应的路径，可以利用webpak对于output参数来修改资源路径
   3.删除死代码（tree shaking），CSS需要purify-CSS
   4.提取公共代码
4： JS节流以及防抖
   


